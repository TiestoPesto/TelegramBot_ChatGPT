"""–î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—É–¥–∏–æ –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python
–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""
import asyncio
from openai import AsyncOpenAI
from aiogram import Bot, types, Dispatcher, executor
import logging
from dotenv import load_dotenv, find_dotenv
import os
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton
import speech_recognition as sr
import uuid
import sqlite3

load_dotenv(find_dotenv())
language = 'ru_RU'

API_TOKEN = os.getenv('TG_BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')
YOUR_CHANNEL_OWNER_ID = os.getenv('YOUR_CHANNEL_OWNER_ID')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ API OpenAI
client = AsyncOpenAI(
	api_key=os.environ.get("OPENAI_TOKEN"),
)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞
recognizer = sr.Recognizer()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs('./voice', exist_ok=True)
os.makedirs('./ready', exist_ok=True)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_MESSAGES_PER_USER = 3

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_contexts = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        registration_date TEXT
    )
''')
conn.commit()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
async def send_to_openai(messages):
	try:
		response = await client.chat.completions.create(
			messages=messages,
			model="gpt-3.5-turbo",
		)
		
		logging.info(f"OpenAI API –æ—Ç–≤–µ—Ç:  {response}")
		return response.choices[0].message.content
	except Exception as e:
		logging.error(f"OpenAI API –æ—à–∏–±–∫–∞:, {e}")
		return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–∏—à–ª–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
	try:
		try:
			# –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			user_id = message.from_user.id
			username = message.from_user.username
			registration_date = message.date
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
			data = cursor.fetchone()
			
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			if not data:
				cursor.execute('INSERT INTO users (id, username, registration_date) VALUES (?, ?, ?)',
				               (user_id, username, registration_date))
				conn.commit()
				conn.close()
		except Exception as e:
			logging.error(f"–û—à–∏–±–∫–∞ –ë–î –±–æ—Ç–∞ 90 —Å—Ç—Ä: {e}")
			
		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
		chat_member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
		if chat_member.is_chat_member():
			welcome_text = (
				f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç Govorunio –Ω–∞ –±–∞–∑–µ ChatGPT, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å."
			)
			# await message.answer(welcome_text)
			await bot.send_chat_action(message.chat.id, "typing")
			last_msg = await message.answer(
				"<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML"
			)
			await asyncio.sleep(2)
			await last_msg.edit_text(welcome_text)
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
			await message.answer(
				"–î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º ChatGPT, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª: " + CHANNEL_USERNAME)
	
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞: {e}")
		await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@dp.message_handler(commands=["help"])
async def send_start(message: types.Message):
	text = f"""–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ChatGPT –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª  {CHANNEL_USERNAME} –∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –µ–º—É –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–Ω –æ–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤, –ø–æ–≥–æ–¥—É, –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, ChatGPT –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–≥—Ä –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏, –∏ –≤—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∞–º–∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ ChatGPT –∑–∞ –ø–æ–º–æ—â—å—é, –æ–Ω –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å!

üëã–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ - @Nick_Sam
"""
	await bot.send_chat_action(message.chat.id, "typing")
	last_msg = await message.answer(
		"<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML"
	)
	await asyncio.sleep(2)
	await last_msg.edit_text(text)


@dp.message_handler(commands=['users_bot'])
async def show_users(message: types.Message):
	"""
	–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users_bot.
	–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
	"""
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
	if message.from_user.id != YOUR_CHANNEL_OWNER_ID:
		await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
		return
	
	cursor.execute('SELECT * FROM users')
	users = cursor.fetchall()
	if users:
		all_users = len(users)
		response = f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:     {all_users}\n"
		
		numbers = 0
		for user in users:
			numbers += 1
			response += f"\n‚Ññ {numbers} \nID:     {user[0]},\nUsername:      @{user[1]},\n" \
			            f"Registration Date:        {user[2]}\n"
	else:
		response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
	await message.answer(response)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def clear_user_context(user_id):
	await asyncio.sleep(200)  # –û–∂–∏–¥–∞–µ–º 3,3 –º–∏–Ω—É—Ç—ã
	if user_id in user_contexts:
		del user_contexts[user_id]
		logging.info(f"–ü—Ä–æ—à–ª–æ 3 –º–∏–Ω—É—Ç—ã. –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def recognise(filename):
	with sr.AudioFile(filename) as source:
		audio_text = recognizer.listen(source)
		try:
			text = recognizer.recognize_google(audio_text, language=language)
			logging.error(f'–ü–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç: {text}')
			
			return text
		except Exception as e:
			logging.error(f'–ò–∑–≤–∏–Ω–∏—Ç–µ..—É –Ω–∞—Å –æ—à–∏–±–∫–∞: {e}')
			return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –í–∞—Å –ø–ª–æ—Ö–æ —Å–ª—ã—à–Ω–æ, —Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ –∏ –æ—Ç—á–µ—Ç–ª–∏–≤–æ"


@dp.message_handler(content_types=ContentType.VOICE)
async def handle_voice(message: types.Message):
	try:
		
		try:
			# –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			user_id = message.from_user.id
			username = message.from_user.username
			registration_date = message.date
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
			data = cursor.fetchone()
			
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			if not data:
				cursor.execute('INSERT INTO users (id, username, registration_date) VALUES (?, ?, ?)',
				               (user_id, username, registration_date))
				conn.commit()
				conn.close()
		except Exception as e:
			logging.error(f"–û—à–∏–±–∫–∞ –ë–î –±–æ—Ç–∞ 90 —Å—Ç—Ä: {e}")
		
		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
		chat_member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
		if chat_member.is_chat_member():
			try:
				await bot.send_chat_action(message.chat.id, "typing")
				last_msg = await message.answer(
					"<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ó–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º...</code>", parse_mode="HTML"
				)
				filename = str(uuid.uuid4())
				file_name_full = "./voice/" + filename + ".ogg"
				file_name_full_converted = "./ready/" + filename + ".wav"
				file_info = await bot.get_file(message.voice.file_id)
				downloaded_file = await bot.download_file(file_info.file_path)
				
				# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ read(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–π—Ç—ã
				downloaded_bytes = downloaded_file.read()
				
				with open(file_name_full, 'wb') as new_file:
					new_file.write(downloaded_bytes)
				
				os.system("ffmpeg -i " + file_name_full + "  " + file_name_full_converted)
				text = await recognise(file_name_full_converted)
				
				# await last_msg.edit_text(text)
				
				# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
				keyboard = InlineKeyboardMarkup()
				# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
				keyboard.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ì–æ–≤–æ—Ä—É—à–µ?", callback_data="send_message"))
				
				# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
				# await message.answer(text=text, reply_markup=keyboard)
				await last_msg.edit_text(text=text, reply_markup=keyboard)
				
				os.remove(file_name_full)
				os.remove(file_name_full_converted)
			
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
				
				# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
				await message.answer(
					"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.")
		
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
			await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª." + CHANNEL_USERNAME)
	
	except Exception as e:
		# –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
		logging.error(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
		# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
		await message.answer(
			"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã."
			" –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_messages(message: types.Message):
	try:
		
		try:
			# –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			user_id = message.from_user.id
			username = message.from_user.username
			registration_date = message.date
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
			data = cursor.fetchone()
			
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			if not data:
				cursor.execute('INSERT INTO users (id, username, registration_date) VALUES (?, ?, ?)',
				               (user_id, username, registration_date))
				conn.commit()
				conn.close()
		except Exception as e:
			logging.error(f"–û—à–∏–±–∫–∞ –ë–î –±–æ—Ç–∞ 90 —Å—Ç—Ä: {e}")
		
		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
		chat_member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
		if chat_member.is_chat_member():
			# –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç  {message.from_user.username}, {message.text}")
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
			await bot.send_chat_action(message.chat.id, "typing")
			last_msg = await message.answer("<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML")
			
			# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user_id = message.from_user.id
			if user_id not in user_contexts:
				user_contexts[user_id] = []
			
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
			user_contexts[user_id].append({'role': 'user', 'content': message.text})
			
			# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if len(user_contexts[user_id]) > MAX_MESSAGES_PER_USER:
				user_contexts[user_id].pop(0)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞
			
			# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ OpenAI API
			text = await send_to_openai(user_contexts[user_id])
			
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
			user_contexts[user_id].append({'role': 'system', 'content': text})
			
			await last_msg.edit_text(text)
			
			# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
			asyncio.create_task(clear_user_context(user_id))
		
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
			await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª." + CHANNEL_USERNAME)
	
	except Exception as e:
		# –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
		logging.error(f"–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
		# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
		await message.answer(
			"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã. "
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.")


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data == "send_message")
async def send_message(callback_query: types.CallbackQuery):
	try:
		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
		chat_member = await bot.get_chat_member(CHANNEL_ID, callback_query.from_user.id)
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
		if chat_member.is_chat_member():
			# –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç  {callback_query.from_user.username}, {callback_query.message.text}")
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
			await bot.send_chat_action(callback_query.message.chat.id, "typing")
			last_msg = await callback_query.message.answer(
				"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ì–æ–≤–æ—Ä—É—à–∏...",
			)
			
			await callback_query.answer()
			
			# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user_id = callback_query.from_user.id
			if user_id not in user_contexts:
				user_contexts[user_id] = []
			
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
			user_contexts[user_id].append({'role': 'user', 'content': callback_query.message.text})
			
			# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Ö—Ä–∞–Ω–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
			if len(user_contexts[user_id]) > MAX_MESSAGES_PER_USER:
				user_contexts[user_id].pop(0)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞
			
			# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ OpenAI API
			text = await send_to_openai(user_contexts[user_id])
			
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
			user_contexts[user_id].append({'role': 'system', 'content': text})
			
			await last_msg.edit_text(text)
		
		else:
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
			await bot.send_message(callback_query.message.chat.id,
			                       "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª." + CHANNEL_USERNAME)
	
	except Exception as e:
		logging.error(f"An error occurred: {e}")
		# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
		await bot.send_message(callback_query.message.chat.id,
		                       "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.")


if __name__ == '__main__':
	# –í–∫–ª—é—á–µ–Ω–∏–µ long polling
	executor.start_polling(dp, skip_updates=True)
