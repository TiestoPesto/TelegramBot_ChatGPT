from aiohttp import ClientSession, TCPConnector
from openai import OpenAI
from aiogram import Bot, types, Dispatcher, executor
import config
import logging
import time
import os
from dotenv import load_dotenv

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ API OpenAI
client = OpenAI(api_key=os.getenv('OPENAI_TOKEN'))

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = Bot(token=os.getenv('TG_BOT_TOKEN'))
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–µ–¥–µ—Ä–æ–≤
headers = {
	'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0'
}
ip = os.getenv('ip')
port = os.getenv('port')
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏
proxy = {
	'https': f'http://{ip}:{port}'
}
connector = TCPConnector.from_url(proxy)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
	welcome_text = (
		f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ ChatGPT, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å."
	)
	# await message.answer(welcome_text)
	await bot.send_chat_action(message.chat.id, "typing")
	last_msg = await message.answer(
		"<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML"
	)
	time.sleep(2)
	await last_msg.edit_text(welcome_text)


@dp.message_handler(commands=["help"])
async def send_start(message: types.Message):
	text = """–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ChatGPT, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –µ–º—É –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–Ω –æ–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤, –ø–æ–≥–æ–¥—É, –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, ChatGPT –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–≥—Ä –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏, –∏ –≤—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∞–º–∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ ChatGPT –∑–∞ –ø–æ–º–æ—â—å—é, –æ–Ω –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å!

üëã–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ - @gpt_dim
"""
	await bot.send_chat_action(message.chat.id, "typing")
	last_msg = await message.answer(
		"<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML"
	)
	time.sleep(3)
	await last_msg.edit_text(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_messages(message: types.Message):
	try:
		# –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")
		
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
		await bot.send_chat_action(message.chat.id, "typing")
		last_msg = await message.answer(
			"<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML"
		)
		
		chat_completion = client.chat.completions.create(
			messages=[
				{
					"role": "user",
					"content": message.text,
				}
			],
			model="gpt-3.5-turbo",
		)
		
		print(chat_completion.choices[0].message.content)
		await last_msg.edit_text(chat_completion.choices[0].message.content)
	# await message.answer(chat_completion.choices[0].message.content)
	
	except Exception as e:
		# –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
		logging.error(f"An error occurred: {e}")
		
		# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
		await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.")


if __name__ == '__main__':
	# –í–∫–ª—é—á–µ–Ω–∏–µ long polling
	executor.start_polling(dp, skip_updates=True)
