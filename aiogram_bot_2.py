import asyncio
import logging
import os
import uuid
from dotenv import load_dotenv, find_dotenv
from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from openai import AsyncOpenAI
import speech_recognition as sr


load_dotenv(find_dotenv())
language = 'ru_RU'

API_TOKEN = os.getenv('TG_BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ API OpenAI
client = AsyncOpenAI(api_key=os.environ.get("OPENAI_TOKEN"))

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞
recognizer = sr.Recognizer()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs('./voice', exist_ok=True)
os.makedirs('./ready', exist_ok=True)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–µ–¥–µ—Ä–æ–≤
headers = {'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0'}


async def recognize_voice(filename):
    with sr.AudioFile(filename) as source:
        audio_text = recognizer.listen(source)
        try:
            text = recognizer.recognize_google(audio_text, language=language)
            logging.info('–ü–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç: %s', text)
            return text
        except Exception as e:
            logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: %s', e)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∫–∞–∂–∏—Ç–µ –µ—â–µ —Ä–∞–∑"


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if chat_member.is_chat_member():
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ ChatGPT, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º. "
                f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å."
            )
            await bot.send_chat_action(message.chat.id, "typing")
            last_msg = await message.answer("<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML")
            await asyncio.sleep(2)
            await last_msg.edit_text(welcome_text)
        else:
            await message.answer("–î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ ChatGPT, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: "
                                 + CHANNEL_USERNAME)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@dp.message_handler(commands=["help"])
async def send_start(message: types.Message):
    text = """–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ChatGPT –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª  {} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –µ–º—É –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–Ω –æ–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤, –ø–æ–≥–æ–¥—É, –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

–ö—Ä–æ–º–µ —Ç–æ–≥–æ, ChatGPT –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–≥—Ä –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏, –∏ –≤—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∞–º–∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ ChatGPT –∑–∞ –ø–æ–º–æ—â—å—é, –æ–Ω –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å!

üëã–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ - @gpt_dim
""".format(CHANNEL_USERNAME)
    await bot.send_chat_action(message.chat.id, "typing")
    last_msg = await message.answer("<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML")
    await asyncio.sleep(2)
    await last_msg.edit_text(text)


@dp.message_handler(content_types=ContentType.VOICE)
async def handle_voice(message: types.Message):
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if chat_member.is_chat_member():
            try:
                await bot.send_chat_action(message.chat.id, "typing")
                last_msg = await message.answer(
                    "<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ó–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º...</code>", parse_mode="HTML"
                )
                filename = str(uuid.uuid4())
                file_name_full = "./voice/" + filename + ".ogg"
                file_name_full_converted = "./ready/" + filename + ".wav"
                file_info = await bot.get_file(message.voice.file_id)
                downloaded_file = await bot.download_file(file_info.file_path)

                downloaded_bytes = downloaded_file.read()

                with open(file_name_full, 'wb') as new_file:
                    new_file.write(downloaded_bytes)

                os.system("ffmpeg -i " + file_name_full + "  " + file_name_full_converted)
                text = await recognize_voice(file_name_full_converted)

                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ì–æ–≤–æ—Ä—É—à–µ?", callback_data="send_message"))

                await last_msg.edit_text(text=text, reply_markup=keyboard)

                os.remove(file_name_full)
                os.remove(file_name_full_converted)

            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: %s", e)
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.")

        else:
            await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª." + CHANNEL_USERNAME)
    except Exception as e:
        logging.error("An error occurred: %s", e)
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.")


@dp.message_handler()
async def handle_messages(message: types.Message):
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if chat_member.is_chat_member():
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", message.from_user.username, message.text)
            await bot.send_chat_action(message.chat.id, "typing")
            last_msg = await message.answer("<code>–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞...</code>", parse_mode="HTML")

            chat_completion = await client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": message.text,
                    }
                ],
                model="gpt-3.5-turbo",
            )

            await last_msg.edit_text(chat_completion.choices[0].message.content)

        else:
            await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª." + CHANNEL_USERNAME)
    except Exception as e:
        logging.error("An error occurred: %s", e)
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.")


@dp.callback_query_handler(lambda callback_query: callback_query.data == "send_message")
async def send_message(callback_query: types.CallbackQuery):
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, callback_query.from_user.id)
        if chat_member.is_chat_member():
            await bot.send_chat_action(callback_query.message.chat.id, "typing")
            last_msg = await callback_query.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ì–æ–≤–æ—Ä—É—à–∏...")
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", callback_query.from_user.username, callback_query.message.text)

            chat_completion = await client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": callback_query.message.text,
                    }
                ],
                model="gpt-3.5-turbo",
            )

            await last_msg.edit_text(chat_completion.choices[0].message.content)

        else:
            await bot.send_message(callback_query.message.chat.id,
                                   "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª." + CHANNEL_USERNAME)

    except Exception as e:
        logging.error("An error occurred: %s", e)
        await bot.send_message(callback_query.message.chat.id,
                               "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
